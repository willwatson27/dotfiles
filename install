#!/bin/bash

ensure_not_root() {
    if [ "$(id -u)" -eq 0 ]; then
        echo "WARNING: You are logged in as root."
        read -p "Are you sure you want to continue? (y/n) " -n 1 -r
        echo    # (optional) move to a new line
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
        echo "WARNING: You probably don't want to do this."
        read -p "Are you really sure you want to continue? (y/n) " -n 1 -r
        echo    # (optional) move to a new line
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

ensure_default_user() {
    local user_setting="[user]\ndefault=$USER"
    if ! grep -qE '^\[user\]$' /etc/wsl.conf; then
        echo "Adding user default to /etc/wsl.conf"
        sudo sh -c "echo \"$user_setting\" >> /etc/wsl.conf"
    elif ! grep -qE "^default=$USER$" /etc/wsl.conf; then
        echo "Updating user default in /etc/wsl.conf"
        sudo sed -i "/^\[user\]$/,/^\[/ s/^default=.*/default=$USER/" /etc/wsl.conf
    fi
}

install_packages() {
    local packages=(stow tmux neovim fzf fd-find ripgrep unzip curl build-essential)
    #fd-find is for telescope speed improvements

    # There is a version of fzf being built by telescope-fzf-native,
    # I think istalling it here might fix some other stuff, we'll see.

    if ! grep -R "neovim-ppa/unstable" /etc/apt/sources.list* > /dev/null; then
        sudo add-apt-repository -y ppa:neovim-ppa/unstable
    fi
    local missing=()
    for package in "${packages[@]}"; do
        if ! dpkg-query --status "$package" &>/dev/null; then
            missing+=("$package")
        fi
    done
    if [ ${#missing[@]} -gt 0 ]; then
        echo "This will install the following packages:"
        printf '%s\n' "${missing[@]}"
        read -p "Do you want to continue? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo apt update && sudo apt install -y "${missing[@]}"
        else
            echo "Exiting install script."
            exit 0
        fi
    fi
}

stow_configs() {
    local backed_up=(".bashrc" ".profile")
    for file in "${backed_up[@]}"; do
        if [ -f "$HOME/$file" ] && [ ! -L "$HOME/$file" ]; then
            local backup_file="$HOME/.backup$file"
            mv "$HOME/$file" "$backup_file"
        fi
    done

    local stowables=(bash bin nvim tmux)
    cd ~/dotfiles || exit
    for dir in "${stowables[@]}"; do
       stow -R -d ~/dotfiles -t ~ "$dir"
    done
}

install_oh_my_posh() {
    if [ ! -f /usr/local/bin/oh-my-posh ]; then
        echo "Installing OhMyPosh"
        sudo wget -q https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh
        sudo chmod +x /usr/local/bin/oh-my-posh
        mkdir -p ~/.poshthemes
        wget -q https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/themes.zip -O ~/.poshthemes/themes.zip
        unzip -o ~/.poshthemes/themes.zip -d ~/.poshthemes && chmod u+rw ~/.poshthemes/*.omp.* && rm ~/.poshthemes/themes.zip
    fi
}

install_packer_nvim() {
    if [ ! -d ~/.local/share/nvim/site/pack/packer/start/packer.nvim ]; then
        echo "Installing Packer for Neovim"
        git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim
    fi
}

install_lazygit() {
    if [ ! -f /usr/local/bin/lazygit ]; then
        echo "Installing Lazygit"
        local latest_version=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
        local download_url="https://github.com/jesseduffield/lazygit/releases/download/v${latest_version}/lazygit_${latest_version}_Linux_x86_64.tar.gz"
	echo $download_url
        curl -Lo lazygit.tar.gz "$download_url"
        tar xf lazygit.tar.gz lazygit
        sudo install lazygit /usr/local/bin
        rm -rf lazygit lazygit.tar.gz
    fi
}

configure_git() {
    local current_user_name=$(git config --global user.name)
    local current_user_email=$(git config --global user.email)

    read -e -p "Git username: " -i "$current_user_name" user_name
    read -e -p "Git email: " -i "$current_user_email" user_email

    git config --global user.name "$user_name"
    git config --global user.email "$user_email"

    local existing_key=$(grep -E -l " ${user_email}$" ~/.ssh/id_rsa.pub 2>/dev/null)
    if [[ -z $existing_key ]]; then
        mkdir -p ~/.ssh
        ssh-keygen -o -t rsa -C "$user_email" -f ~/.ssh/id_rsa
    fi
    echo "PUBLIC KEY:"
    cat ~/.ssh/id_rsa.pub
}

get_font() {
  # Create the fonts directory if it doesn't exist
  if [ ! -d ./fonts ]; then
       mkdir -p ./fonts
       # Download the archive and extract only the files with 'Mono' in their name
       wget -O CascadiaCode.zip "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/CascadiaCode.zip" && unzip -j CascadiaCode.zip '*Mono*' -d ./fonts && rm CascadiaCode.zip
  fi

}

install_font() {
    # Get the full path to the fonts directory in WSL
    fonts_path=$(pwd)/fonts

    # Convert the Unix path to a Windows path, replace '/mnt/' with the drive letter and change slashes
    win_fonts_path=$(echo $fonts_path | sed -e 's/^\/mnt\///' -e 's/\//\\/g')

    # Use PowerShell to install the fonts directly from the WSL path
    wsl_dist_name="Ubuntu-LX"  # Set your WSL distribution name
    fonts_path=$(pwd)/fonts  # This gets the full path to ./fonts
    win_fonts_path=$(echo $fonts_path | sed 's/^\///' | sed 's/\//\\/g')  # Adjusted conversion for WSL path

    # Use PowerShell to install the fonts directly from the WSL path
    powershell.exe -Command "& {
        \$fontDir = 'C:\\Windows\\Fonts';
        Get-ChildItem -Path '\\\wsl.localhost\\${wsl_dist_name}\\home\\lx\\dotfiles\\fonts\\*.ttf' | ForEach-Object {
            \$fontPath = \$_;
            \$destPath = Join-Path -Path \$fontDir -ChildPath \$fontPath.Name;
            Copy-Item -Path \$fontPath.FullName -Destination \$destPath;
            Write-Host \"Copied \$fontPath to \$destPath\";
            # Note: Uncomment and understand the following lines before running them
            #\$regPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\";
            #\$fontName = [System.IO.Path]::GetFileNameWithoutExtension(\$fontPath.Name) + ' (TrueType)';
            #Set-ItemProperty -Path \$regPath -Name \$fontName -Value \$fontPath.Name;
        }
    }"
}

install_lua53() {
    if [ ! -d ~/lua53 ]; then
        echo "Building Lua 5.3.6 from srouce"
        sudo apt install build-essential libreadline-dev
        mkdir ~/lua53
        cd ~/lua53
        curl -R -O https://www.lua.org/ftp/lua-5.3.6.tar.gz
        tar zxf lua-5.3.6.tar.gz
        rm lua-5.3.6.tar.gz
        cd lua-5.3.6
        make linux test
        sudo make install
    fi
}

create_hushfile() {
    touch $HOME/.hushlogin
}

ensure_not_root
ensure_default_user
install_packages
stow_configs
install_lua53
install_oh_my_posh
install_packer_nvim
install_lazygit
get_font
# install_font
configure_git
create_hushfile

# Sourcing the updated files to apply changes
[ -f "$HOME/.bashrc" ] && source "$HOME/.bashrc"
[ -f "$HOME/.profile" ] && source "$HOME/.profile"
